### Simulation seed
SEED 9381048245

### MAX Simulation time
CYCLE 3200

### Verbosity level
DEBUG 100

### Number of nodes in the network
NETSIZE 11

### Number of chunks to transmit
CHUNKS 10

### Nodes degree
DEGREE 16

### Message delay: min and max
DELTAmin 10
DELTAmax 250

## Bitrate streaming
Bs 1000000

### Time in milliseconds to produce a new chunk
Ts  1000

## Dropping rate [0:1]
## Currently, this protocol does not implement any form of "message recovery"
## therefor we are working on reliable channel.
DROP 0

## Maximum number of active connections in upload and download
## Active means that the node issues either a push or pull to a target node
## push for upload and pull for download.
ALPHA_up 1
ALPHA_down 1

## Maximum number of passive connections in upload and download
## Passive means that the node is the target node which receives either a push or pull request
## therefor it will either receive a chunk via push or satisfy a pull request.
PI_up 1
PI_down 10

## Window size for either push or pull active message,
## the node either proposes OMEGA_push chunks in push
## or OMEGA_pull for pull
OMEGA_push 1

### Maximum number of push and pull attempts
RHO_push 1

### Observer Step in milliseconds
SAMPLE_STEP 10000
BAND_STEP 1000

## Time in millisecond needed for a node to switch between states:
## push -> pull and vice-versa
SWITCHTIME 1


#- - - - -  - P R O T O C O L S - - - - -  -#
#############Random Generator#############
#random p4s.util.RandomRLC
random.seed SEED
##########Simulator parameter#########
network.size NETSIZE

simulation.endtime CYCLE
simulation.experiments 1
simulation.timebits 16
simulation.logtime OBSERVER-STEP
#simulation.stdout PrintLogs

## Overlay network used
protocol.link peersim.core.IdleProtocol
protocol.link.capacity DEGREE

## Protocol used for chunks distribution
protocol.int BandwidthTester
protocol.int.linkable link
protocol.int.transport urt

## Transport protocol used
protocol.urt UniformRandomTransportTimed
protocol.urt.mindelay DELTAmin
protocol.urt.maxdelay DELTAmax

## Bandwidth protocol used
protocol.bwp BandwidthAwareProtocol

#- - - - - - I N I T I A L I Z E R S - - - - -  -#
## Overlay network initializer
init.rndlink WireKOutUnd
init.rndlink.k DEGREE
init.rndlink.protocol link

## You can set here the source multiplier, adding the base_uplink and the bms,
## or the source will be initialized as the other nodes.
init.bwi bandwidth.core.BandwidthAwareInitializer
{
    ## Protocol to initialize
    protocol bwp
    ## Verbosity level
    debug DEBUG
    ## Base uplink value (e.g., it could be 1Mbit/s -> 1000000)
    base_uplink 1000000
    ## Source bandwidth, as uplink multiplicator.
    ## Note that the source is the last peer in the neighbor.
    bms 2.1
    ## Active connections are those started by node.
    ## Involving upload bandwidth
    active_upload ALPHA_up
    ## Involving download bandwidth
    active_download ALPHA_down
    ## Passive connections are those received by other nodes.
    ## Involving upload bandwidth
    passive_upload PI_up
    ## Involving download bandwidth
    passive_download PI_down
    ## Ratio download-upload
    ratiodu 4
}

init.bandUP bandwidth.core.CDFDistribution
{
    ## Protocol identifier (to set)
    protocol bwp
    ## Base value (e.g., for the bandwidth could be 1Mbit/s = 1000000)
    base_value 1000000
    ## Base value multipliers, separated by comma.
    value_multiplier 3.1,3.3,3.6,4
    ## CDF distribution corresponding to multipliers.
    cdf_distribution 0.5,0.6,0.9,1.0
    ## Method invoked to set the value
    setter initUpload
}


## Chunk distribution protocol initializer
init.ii BandwidthTesterInitializer
init.ii.protocol int
init.ii.bandwidth bwp
init.ii.chunks CHUNKS
init.ii.chunk_size Bs/Ts*1000
init.ii.debug DEBUG

## Initializers order
include.init bwi bandUP rndlink ii